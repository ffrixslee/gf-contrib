-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Calc/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pNumber -> Number                           (3)
	Integer -> L_integ                                 (4)
	Exp -> Exp '+' Exp1                                (5)
	Exp -> Exp '-' Exp1                                (6)
	Exp -> Exp1                                        (7)
	Exp1 -> Exp1 '*' Exp2                              (8)
	Exp1 -> Exp1 '/' Exp2                              (9)
	Exp1 -> Exp2                                       (10)
	Exp2 -> Integer                                    (11)
	Exp2 -> '(' Exp ')'                                (12)
	Number -> '1'                                      (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'/'            { PT _ (TS _ 6) }
	'1'            { PT _ (TS _ 7) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pNumber  rule  3
	Integer         rule  4
	Exp             rules 5, 6, 7
	Exp1            rules 8, 9, 10
	Exp2            rules 11, 12
	Number          rule  13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExp -> . Exp                                (rule 0)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp            goto state 13
	Exp1           goto state 14
	Exp2           goto state 12

State 1

	%start_pExp1 -> . Exp1                              (rule 1)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp1           goto state 11
	Exp2           goto state 12

State 2

	%start_pExp2 -> . Exp2                              (rule 2)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp2           goto state 9

State 3

	%start_pNumber -> . Number                          (rule 3)

	'1'            shift, and enter state 7

	Number         goto state 6

State 4

	Integer -> . L_integ                                (rule 4)

	L_integ        shift, and enter state 5


State 5

	Integer -> L_integ .                                (rule 4)

	')'            reduce using rule 4
	'*'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'/'            reduce using rule 4
	%eof           reduce using rule 4


State 6

	%start_pNumber -> Number .                          (rule 3)

	%eof           accept


State 7

	Number -> '1' .                                     (rule 13)

	%eof           reduce using rule 13


State 8

	Exp2 -> Integer .                                   (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'/'            reduce using rule 11
	%eof           reduce using rule 11


State 9

	%start_pExp2 -> Exp2 .                              (rule 2)

	%eof           accept


State 10

	Exp2 -> '(' . Exp ')'                               (rule 12)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp            goto state 19
	Exp1           goto state 14
	Exp2           goto state 12

State 11

	%start_pExp1 -> Exp1 .                              (rule 1)
	Exp1 -> Exp1 . '*' Exp2                             (rule 8)
	Exp1 -> Exp1 . '/' Exp2                             (rule 9)

	'*'            shift, and enter state 15
	'/'            shift, and enter state 16
	%eof           accept


State 12

	Exp1 -> Exp2 .                                      (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'/'            reduce using rule 10
	%eof           reduce using rule 10


State 13

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '+' Exp1                               (rule 5)
	Exp -> Exp . '-' Exp1                               (rule 6)

	'+'            shift, and enter state 17
	'-'            shift, and enter state 18
	%eof           accept


State 14

	Exp -> Exp1 .                                       (rule 7)
	Exp1 -> Exp1 . '*' Exp2                             (rule 8)
	Exp1 -> Exp1 . '/' Exp2                             (rule 9)

	')'            reduce using rule 7
	'*'            shift, and enter state 15
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'/'            shift, and enter state 16
	%eof           reduce using rule 7


State 15

	Exp1 -> Exp1 '*' . Exp2                             (rule 8)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp2           goto state 24

State 16

	Exp1 -> Exp1 '/' . Exp2                             (rule 9)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp2           goto state 23

State 17

	Exp -> Exp '+' . Exp1                               (rule 5)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp1           goto state 22
	Exp2           goto state 12

State 18

	Exp -> Exp '-' . Exp1                               (rule 6)

	'('            shift, and enter state 10
	L_integ        shift, and enter state 5

	Integer        goto state 8
	Exp1           goto state 21
	Exp2           goto state 12

State 19

	Exp -> Exp . '+' Exp1                               (rule 5)
	Exp -> Exp . '-' Exp1                               (rule 6)
	Exp2 -> '(' Exp . ')'                               (rule 12)

	')'            shift, and enter state 20
	'+'            shift, and enter state 17
	'-'            shift, and enter state 18


State 20

	Exp2 -> '(' Exp ')' .                               (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'/'            reduce using rule 12
	%eof           reduce using rule 12


State 21

	Exp -> Exp '-' Exp1 .                               (rule 6)
	Exp1 -> Exp1 . '*' Exp2                             (rule 8)
	Exp1 -> Exp1 . '/' Exp2                             (rule 9)

	')'            reduce using rule 6
	'*'            shift, and enter state 15
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'/'            shift, and enter state 16
	%eof           reduce using rule 6


State 22

	Exp -> Exp '+' Exp1 .                               (rule 5)
	Exp1 -> Exp1 . '*' Exp2                             (rule 8)
	Exp1 -> Exp1 . '/' Exp2                             (rule 9)

	')'            reduce using rule 5
	'*'            shift, and enter state 15
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'/'            shift, and enter state 16
	%eof           reduce using rule 5


State 23

	Exp1 -> Exp1 '/' Exp2 .                             (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'/'            reduce using rule 9
	%eof           reduce using rule 9


State 24

	Exp1 -> Exp1 '*' Exp2 .                             (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'/'            reduce using rule 8
	%eof           reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 8
Number of non-terminals: 9
Number of states: 25
