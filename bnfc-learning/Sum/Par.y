-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Sum.Par where
import qualified Sum.Abs
import Sum.Lex
}

%name pExp Exp
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '+' { PT _ (TS _ 1) }
  L_integ  { PT _ (TI $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

Exp :: { Sum.Abs.Exp }
Exp : Integer { Sum.Abs.EInt $1 }
    | Exp '+' Integer { Sum.Abs.EPlus $1 $3 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

