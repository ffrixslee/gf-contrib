-- Haskell module generated by the BNF converter

module Prog.Skel where

import qualified Prog.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Prog.Abs.Id -> Result
transId x = case x of
  Prog.Abs.Id string -> failure x
transPrograma :: Prog.Abs.Programa -> Result
transPrograma x = case x of
  Prog.Abs.PDefs defs -> failure x
transDef :: Prog.Abs.Def -> Result
transDef x = case x of
  Prog.Abs.DFun type_ id args stms -> failure x
transArg :: Prog.Abs.Arg -> Result
transArg x = case x of
  Prog.Abs.ADecl type_ id -> failure x
transStm :: Prog.Abs.Stm -> Result
transStm x = case x of
  Prog.Abs.SExp exp -> failure x
  Prog.Abs.SDecl type_ id -> failure x
  Prog.Abs.SDecls type_ id ids -> failure x
  Prog.Abs.SInit type_ id exp -> failure x
  Prog.Abs.SReturn exp -> failure x
  Prog.Abs.SWhile exp stm -> failure x
  Prog.Abs.SBlock stms -> failure x
  Prog.Abs.SIfElse exp stm1 stm2 -> failure x
transExp :: Prog.Abs.Exp -> Result
transExp x = case x of
  Prog.Abs.EInt integer -> failure x
  Prog.Abs.EDouble double -> failure x
  Prog.Abs.ETrue -> failure x
  Prog.Abs.EFalse -> failure x
  Prog.Abs.EId id -> failure x
  Prog.Abs.EApp id exps -> failure x
  Prog.Abs.EPIncr exp -> failure x
  Prog.Abs.EPDecr exp -> failure x
  Prog.Abs.EIncr exp -> failure x
  Prog.Abs.EDecr exp -> failure x
  Prog.Abs.ETimes exp1 exp2 -> failure x
  Prog.Abs.EDiv exp1 exp2 -> failure x
  Prog.Abs.EPlus exp1 exp2 -> failure x
  Prog.Abs.EMinus exp1 exp2 -> failure x
  Prog.Abs.ELt exp1 exp2 -> failure x
  Prog.Abs.EGt exp1 exp2 -> failure x
  Prog.Abs.ELtEq exp1 exp2 -> failure x
  Prog.Abs.EGtWq exp1 exp2 -> failure x
  Prog.Abs.EEq exp1 exp2 -> failure x
  Prog.Abs.ENEq exp1 exp2 -> failure x
  Prog.Abs.EAnd exp1 exp2 -> failure x
  Prog.Abs.EOr exp1 exp2 -> failure x
  Prog.Abs.EAss exp1 exp2 -> failure x
transType :: Prog.Abs.Type -> Result
transType x = case x of
  Prog.Abs.Tbool -> failure x
  Prog.Abs.Tdouble -> failure x
  Prog.Abs.Tint -> failure x
  Prog.Abs.Tvoid -> failure x

