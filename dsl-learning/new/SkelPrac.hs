-- Haskell module generated by the BNF converter

module SkelPrac where

import qualified AbsPrac

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsPrac.Ident -> Result
transIdent x = case x of
  AbsPrac.Ident string -> failure x
transWToken :: AbsPrac.WToken -> Result
transWToken x = case x of
  AbsPrac.WToken string -> failure x
transTop :: AbsPrac.Top -> Result
transTop x = case x of
  AbsPrac.DeclTop decl -> failure x
transDecl :: AbsPrac.Decl -> Result
transDecl x = case x of
  AbsPrac.TypeDecl ident wordnetid field -> failure x
transField :: AbsPrac.Field -> Result
transField x = case x of
  AbsPrac.Field_Todo -> failure x
transWordnetID :: AbsPrac.WordnetID -> Result
transWordnetID x = case x of
  AbsPrac.WordnetID1 wtoken -> failure x

