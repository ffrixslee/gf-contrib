-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParPrac where
import qualified AbsPrac
import LexPrac
}

%name pTop Top
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ':' { PT _ (TS _ 3) }
  'Todo' { PT _ (TS _ 4) }
  'Type' { PT _ (TS _ 5) }
  L_Ident  { PT _ (TV $$) }
  L_WToken { PT _ (T_WToken $$) }

%%

Ident :: { AbsPrac.Ident}
Ident  : L_Ident { AbsPrac.Ident $1 }

WToken :: { AbsPrac.WToken}
WToken  : L_WToken { AbsPrac.WToken $1 }

Top :: { AbsPrac.Top }
Top : Decl { AbsPrac.DeclTop $1 }

Decl :: { AbsPrac.Decl }
Decl : 'Type' Ident WordnetID ':' Field { AbsPrac.TypeDecl $2 $3 $5 }

Field :: { AbsPrac.Field }
Field : 'Todo' { AbsPrac.Field_Todo }

WordnetID :: { AbsPrac.WordnetID }
WordnetID : '(' WToken ')' { AbsPrac.WordnetID1 $2 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

