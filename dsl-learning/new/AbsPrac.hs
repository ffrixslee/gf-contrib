-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module AbsPrac where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype WToken = WToken String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Top = DeclTop Decl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = TypeDecl Ident WordnetID Field
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Field = Field_Todo
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WordnetID = WordnetID1 WToken
  deriving (C.Eq, C.Ord, C.Show, C.Read)

